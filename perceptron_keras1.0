{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from random import randint\n",
    "from sklearn.utils import shuffle\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import tensorflow as tf\n",
    "import pandas\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Activation, Dense\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.metrics import categorical_crossentropy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numero GPU:  0\n"
     ]
    }
   ],
   "source": [
    "physical_devices = tf.config.experimental.list_physical_devices('GPU')\n",
    "print(\"Numero GPU: \", len(physical_devices) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_data(test):\n",
    "    na_age = test['Age'].isna()\n",
    "    #na_age.replace(False, float(0))\n",
    "    test['is_Age']= na_age.replace(False, 0)\n",
    "    test['Fare'] = test['Fare']/300\n",
    "    test['Age'] = test['Age'].fillna(0)/100.\n",
    "    '''\n",
    "    test['Embarked_Q'] = test['Embarked'].replace('Q', 1).replace('S', 0).replace('C', 0).fillna(0)\n",
    "    test['Embarked_C'] = test['Embarked'].replace('C', 1).replace('S', 0).replace('Q', 0).fillna(0)\n",
    "    test['Embarked_S'] = test['Embarked'].replace('S', 1).replace('Q', 0).replace('C', 0).fillna(0)\n",
    "    '''\n",
    "    test.pop('Ticket')\n",
    "    test.pop('Embarked')\n",
    "    test.pop('Cabin')\n",
    "    test.pop('Name')\n",
    "    test.pop('PassengerId')\n",
    "    test = test.replace('male', 1.).replace('female', -1.)\n",
    "    return test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pandas.read_csv('train.csv')\n",
    "x = prepare_data(data)\n",
    "y = x.pop('Survived').to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3.        ,  1.        ,  0.22      , ...,  0.        ,\n",
       "         0.02416667,  0.        ],\n",
       "       [ 1.        , -1.        ,  0.38      , ...,  0.        ,\n",
       "         0.237611  ,  0.        ],\n",
       "       [ 3.        , -1.        ,  0.26      , ...,  0.        ,\n",
       "         0.02641667,  0.        ],\n",
       "       ...,\n",
       "       [ 3.        , -1.        ,  0.        , ...,  2.        ,\n",
       "         0.07816667,  1.        ],\n",
       "       [ 1.        ,  1.        ,  0.26      , ...,  0.        ,\n",
       "         0.1       ,  0.        ],\n",
       "       [ 3.        ,  1.        ,  0.32      , ...,  0.        ,\n",
       "         0.02583333,  0.        ]])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>is_Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>0.22</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.024167</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>0.38</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.237611</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.026417</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>0.35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.177000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.026833</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.043333</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.078167</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.025833</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass     Sex   Age  SibSp  Parch      Fare  is_Age\n",
       "0           0       3    male  0.22      1      0  0.024167     0.0\n",
       "1           1       1  female  0.38      1      0  0.237611     0.0\n",
       "2           1       3  female  0.26      0      0  0.026417     0.0\n",
       "3           1       1  female  0.35      1      0  0.177000     0.0\n",
       "4           0       3    male  0.35      0      0  0.026833     0.0\n",
       "..        ...     ...     ...   ...    ...    ...       ...     ...\n",
       "886         0       2    male  0.27      0      0  0.043333     0.0\n",
       "887         1       1  female  0.19      0      0  0.100000     0.0\n",
       "888         0       3  female  0.00      1      2  0.078167     1.0\n",
       "889         1       1    male  0.26      0      0  0.100000     0.0\n",
       "890         0       3    male  0.32      0      0  0.025833     0.0\n",
       "\n",
       "[891 rows x 8 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential([\n",
    "    Dense(units = 10, input_shape=(7,), activation = 'relu'), \n",
    "    Dense(units = 7, activation = 'relu'),\n",
    "    Dense(units = 2 , activation = 'softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                (None, 10)                80        \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 7)                 77        \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 2)                 16        \n",
      "=================================================================\n",
      "Total params: 173\n",
      "Trainable params: 173\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer = Adam(learning_rate = 0.0001), loss ='sparse_categorical_crossentropy', metrics= ['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/40\n",
      "90/90 - 0s - loss: 0.5565 - accuracy: 0.7059\n",
      "Epoch 2/40\n",
      "90/90 - 0s - loss: 0.5533 - accuracy: 0.7071\n",
      "Epoch 3/40\n",
      "90/90 - 0s - loss: 0.5501 - accuracy: 0.7093\n",
      "Epoch 4/40\n",
      "90/90 - 0s - loss: 0.5469 - accuracy: 0.7172\n",
      "Epoch 5/40\n",
      "90/90 - 0s - loss: 0.5436 - accuracy: 0.7396\n",
      "Epoch 6/40\n",
      "90/90 - 0s - loss: 0.5406 - accuracy: 0.7565\n",
      "Epoch 7/40\n",
      "90/90 - 0s - loss: 0.5373 - accuracy: 0.7666\n",
      "Epoch 8/40\n",
      "90/90 - 0s - loss: 0.5342 - accuracy: 0.7722\n",
      "Epoch 9/40\n",
      "90/90 - 0s - loss: 0.5311 - accuracy: 0.7744\n",
      "Epoch 10/40\n",
      "90/90 - 0s - loss: 0.5284 - accuracy: 0.7823\n",
      "Epoch 11/40\n",
      "90/90 - 0s - loss: 0.5259 - accuracy: 0.7845\n",
      "Epoch 12/40\n",
      "90/90 - 0s - loss: 0.5236 - accuracy: 0.7856\n",
      "Epoch 13/40\n",
      "90/90 - 0s - loss: 0.5215 - accuracy: 0.7879\n",
      "Epoch 14/40\n",
      "90/90 - 0s - loss: 0.5195 - accuracy: 0.7879\n",
      "Epoch 15/40\n",
      "90/90 - 0s - loss: 0.5175 - accuracy: 0.7901\n",
      "Epoch 16/40\n",
      "90/90 - 0s - loss: 0.5156 - accuracy: 0.7856\n",
      "Epoch 17/40\n",
      "90/90 - 0s - loss: 0.5137 - accuracy: 0.7868\n",
      "Epoch 18/40\n",
      "90/90 - 0s - loss: 0.5118 - accuracy: 0.7868\n",
      "Epoch 19/40\n",
      "90/90 - 0s - loss: 0.5098 - accuracy: 0.7856\n",
      "Epoch 20/40\n",
      "90/90 - 0s - loss: 0.5079 - accuracy: 0.7856\n",
      "Epoch 21/40\n",
      "90/90 - 0s - loss: 0.5061 - accuracy: 0.7868\n",
      "Epoch 22/40\n",
      "90/90 - 0s - loss: 0.5043 - accuracy: 0.7856\n",
      "Epoch 23/40\n",
      "90/90 - 0s - loss: 0.5027 - accuracy: 0.7856\n",
      "Epoch 24/40\n",
      "90/90 - 0s - loss: 0.5010 - accuracy: 0.7856\n",
      "Epoch 25/40\n",
      "90/90 - 0s - loss: 0.4993 - accuracy: 0.7834\n",
      "Epoch 26/40\n",
      "90/90 - 0s - loss: 0.4977 - accuracy: 0.7868\n",
      "Epoch 27/40\n",
      "90/90 - 0s - loss: 0.4960 - accuracy: 0.7856\n",
      "Epoch 28/40\n",
      "90/90 - 0s - loss: 0.4945 - accuracy: 0.7868\n",
      "Epoch 29/40\n",
      "90/90 - 0s - loss: 0.4934 - accuracy: 0.7868\n",
      "Epoch 30/40\n",
      "90/90 - 0s - loss: 0.4922 - accuracy: 0.7935\n",
      "Epoch 31/40\n",
      "90/90 - 0s - loss: 0.4911 - accuracy: 0.7935\n",
      "Epoch 32/40\n",
      "90/90 - 0s - loss: 0.4898 - accuracy: 0.7980\n",
      "Epoch 33/40\n",
      "90/90 - 0s - loss: 0.4882 - accuracy: 0.7980\n",
      "Epoch 34/40\n",
      "90/90 - 0s - loss: 0.4865 - accuracy: 0.7980\n",
      "Epoch 35/40\n",
      "90/90 - 0s - loss: 0.4855 - accuracy: 0.7969\n",
      "Epoch 36/40\n",
      "90/90 - 0s - loss: 0.4841 - accuracy: 0.7980\n",
      "Epoch 37/40\n",
      "90/90 - 0s - loss: 0.4830 - accuracy: 0.7969\n",
      "Epoch 38/40\n",
      "90/90 - 0s - loss: 0.4815 - accuracy: 0.7980\n",
      "Epoch 39/40\n",
      "90/90 - 0s - loss: 0.4804 - accuracy: 0.7980\n",
      "Epoch 40/40\n",
      "90/90 - 0s - loss: 0.4795 - accuracy: 0.7980\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7faca02e72b0>"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x = x, y = y, batch_size = 10, epochs = 40, shuffle =True, verbose =2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
